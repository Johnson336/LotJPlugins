<?xml version="1.0" encoding="iso-8859-1" ?> 
<!DOCTYPE muclient> 
<!--  Saved on Sunday, July 04, 2012, 5:39 AM   -->  
<muclient>
<plugin name="LotJResearch" author="@Johnson" id="0b90ce53347f37f34ff36fcf" language="Lua" purpose="Automatic Researching" save_state="y" requires="4.40" version="1.80">
<description trim="y">
<![CDATA[ 'ResearchHelp' - To see the commands available in the game.

Automatically populate and research items that need to be researched using 'researchgrab'.

Now with custom practice list coloring!
Colors are assigned to percentage ranges of lower <-> upper.
Add new highlighting rules with researchColorAdd.
With no arguments this command will prompt you for all the new tier rules.

Add new color highlighting rules with a single command using the syntax:

researchColorAdd <tier 1 Lower> <tier 1 upper> <tier 1 color> <tier 2 Lower> <tier 2 Upper> <tier 2 color> ...

example 1: researchColorAdd 0 25 red 26 50 yellow 51 75 lime 76 100 white
  This example gives you 4 color rules. 0-25 will be red
                                        26-50 will be yellow
                                        51-75 will be lime
                                        76-100 will be white

example 2: researchColorAdd 0 50 red 51 100 lime
              This example gives you 2 color rules. 0-50 will be red
                                                    51-100 will be lime.

There is no limit on the number of color rules you can use and you can leave gaps if you like, but rules
cannot overlap. Colors must be valid mushclient colors, see them by entering 'PickColour(1)' into your
immediate window and clicking run. (open immediate window by pressing ctrl+i)

  ]]> 
  </description>
  </plugin>
<!--   Get our standard constants   --> 
  <include name="constants.lua" /> 
<!--   Triggers    --> 
<triggers>
  <trigger name="ResearchSecure" script="researchNext" match="^You cannot learn more about that from books\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchComplete" script="researchNext" match="^You can\'t learn (any )?more about that from books(\!|\.)$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchSmuggling" script="researchNext" match="^You can\'t learn smuggling skills from a book\!$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchBH" script="researchNext" match="^You can\'t learn bounty hunting skills from a book\!$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchBowcaster" script="researchNext" match="^You aren't going to learn that from a book\. Go find a Wookiee\!$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchFlurry" script="researchNext" match="^Go learn it the hard way\, sissy\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchForce" script="researchNext" match="^You\'re not going to learn force spells from a book\. Trust me\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchScience" script="researchNext" match="^You can\'t learn about that in books\. Go find a teacher\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchSuccess" script="researchSuccess" match="^You finish your studies and feel much more skilled\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchFailure" script="research" match="^You study for hours on end, but fail to gather any knowledge\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchResumeAFK" script="resumeResearchFromAFK" match="^You may now bot again\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchGrabThree" script="grabAdd" match="^([\s\w,-]+)(\s+\d+)\%([\s\w,-]+)(\s+\d+)\%([\s\w,-]+)(\s+\d+)\%(\s?)*$" regexp="y" enabled="n" omit_from_output="y" omit_from_log="y" group="ResearchColour" sequence="100" />
  <trigger name="ResearchGrabTwo" script="grabAdd" match="^([\s\w,-]+)(\s+\d+)\%([\s\w,-]+)(\s+\d+)\%(\s?)*$" regexp="y" enabled="n" omit_from_output="y" omit_from_log="y" group="ResearchColour" sequence="100" />
  <trigger name="ResearchGrabOne" script="grabAdd" match="^([\s\w,-]+)(\s+\d+)\%(\s?)*$" regexp="y" enabled="n" omit_from_output="y" omit_from_log="y" group="ResearchColour" sequence="100" />
  <trigger name="ResearchGrabDone" script="toggleGrabOff" match="^To see a shorter practice list\, type PRACTICE \<class name\>\.$" regexp="y" group="ResearchGrabber" enabled="n" sequence="100" />
  <trigger name="Allskillsclear" script="clearGrabList" match="^([\s,-]+)Skills([\s,-]+)$" regexp="y" enabled="y" group="ResearchStarter" sequence="100" />
</triggers>
<!--   Aliases    --> 
<aliases>
  <alias name="ResearchAdd" script="addItem" match="^researchadd (.*)$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" /> 
  <alias name="ResearchAddShort" script="addItem" match="^radd (.*)$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" /> 
  <alias name="ResearchRem" script="removeItem" match="^researchrem (.*)$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias script="researchHelp" match="^researchhelp(\s*(.*))?$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias name="ResearchClear" script="clearList" match="researchclear" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias name="ResearchAuto" script="researchAuto" match="^researchAuto(.*)?$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias name="ResearchDisplay" script="displayList" match="researchList" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias name="ResearchStart" script="researchStart" match="researchStart" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias name="Research" script="researchArg" match="^research( +(.*))?$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" /> 
  <alias name="ResearchNext" script="researchNext" match="researchNext" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias name="ResearchGrab" script="toggleGrabOn" match="^researchgrab(.*)?" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias name="printskills" script="printSkills" match="^printskills$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias name="Researchcolormodecmd" script="swapColorMode" match="researchColorMode" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias script="colorAdd" match="^researchcoloradd( +(.*))?$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias script="colorList" match="researchcolorlist" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias script="colorRem" match="researchcolorrem *" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias script="colorClear" match="researchcolorclear" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
</aliases>
<!--   Script    --> 
<script>
<![CDATA[ 

require "pairsbykeys"
require "serialize"
local AUTHOR = GetPluginInfo(GetPluginID(), 2) -- author info
local VERSION = string.format("%1.2f", GetPluginInfo(GetPluginID(), 19)) -- version info
local autoResearch = false
local researchList = {}
local currentPos = 1
local currentItem = ""
local grabSkill = ""
local grabPercent = 90
local allSkills = {}
local grab = false
local colorMode = tonumber(GetVariable("colorMode")) or 1
local storage = { percent = 0, name = "" }

local darkblue = RGBColourToName(GetNormalColour(5))
local gray = RGBColourToName(GetBoldColour(1))
local cyan = RGBColourToName(GetBoldColour(7))

 -- enable these to ensure everything works smooth
SetOption("enable_triggers", true)
SetOption("enable_scripts", true)

colorPrefs = {}
-- load in stored custom color prefs
loadstring(GetVariable("colorPrefs") or "") ()


function colorAdd(name, line, args)
  local mode = {}
  local tier = {}
  local lowerFound = false
  local upperFound = false
  local colorFound = false
  if args[1]~="" then -- entered an arg, split it up
    args[1] = Trim(args[1]:gsub("%s+", " ")) -- clean up spaces
    if args[1]:match(",") then -- found a comma
      args = utils.split(args[1], ",")
    elseif args[1]:match(" ") then -- found a space
      args = utils.split(args[1], " ")
    end
    for i, v in pairs(args) do
      if math.fmod(i-1, 3)==0 then -- first arg (tier lower)
        if tonumber(v) then -- entered number
          lowerFound = true
          tier.lower = tonumber(v)
          --Note("arg 1 add tier lower "..tier.lower)
        elseif ColourNameToRGB(v) then -- entered valid color name
          colorFound = true
          tier.color = tonumber(ColourNameToRGB(v))
          --Note("arg 1 add tier color " ..tier.color)
        else -- didn't enter number or valid color name, abort
          ColourNote("red","","Usage: researchColorAdd <lower> <upper> <color> <lower> <upper> <color> ...")
          return
        end
      elseif math.fmod(i-1, 3)==1 then -- second arg (tier upper)
        if tonumber(v) then -- entered number
          if lowerFound then -- already have first number, sanity check this one
            if tonumber(v) > tier.lower then -- number is larger than tier.lower, as it should be
              upperFound = true
              tier.upper = tonumber(v)
              --Note("arg 2 add tier upper "..tier.upper)
            else -- number smaller than tier.lower, swap them
              upperFound = true
              tier.upper = tier.lower
              tier.lower = tonumber(v)
              --Note("arg 2 swap tier lower to tier upper and add tier lower "..tier.lower)
            end
          else -- don't have a first number, meaning first arg was color so this arg is lower
            lowerFound = true
            tier.lower = tonumber(v)
            --Note("arg 2 add tier lower "..tier.lower)
          end
        else -- didn't enter number, abort
          ColourNote("red","","Usage: researchColorAdd <lower> <upper> <color> <lower> <upper> <color> ...")
          return
        end
      elseif math.fmod(i-1, 3)==2 then -- third arg (tier color)
        if tonumber(v) then -- entered number
          if lowerFound then -- already have first number, sanity check this one
            if tonumber(v) > tier.lower then -- number is larger than tier.lower
              upperFound = true
              tier.upper = tonumber(v)
              --Note("arg 3 add tier upper "..tier.upper)
            else -- number is smaller than tier.lower, swap them
              upperFound = true
              tier.upper = tier.lower
              tier.lower = tonumber(v)
              --Note("arg 3 swap tier lower to tier upper and add tier lower "..tier.lower)
            end
          end -- should never get here
        else -- gave a string, convert it to RGB
          v = ColourNameToRGB(v)
          tier.color = tonumber(v)
          --Note("arg 3 add tier color " ..tier.color)
        end
        
        mode[#mode + 1] = tier
        ColourNote(RGBColourToName(tier.color),"","New tier "..tier.lower.." - "..tier.upper.." ("..RGBColourToName(tier.color)..") added.")
        lowerFound = false
        upperFound = false
        colorFound = false
        tier = {}
      end
    end
  else -- no arg, start prompts
    local tiers = utils.inputbox("Number of color tiers?", "Color Tiers", tiers or "4", GetInfo(23), GetInfo(215))
    if not tiers then
      ColourNote("red","","User pressed cancel, aborting.")
      return
    end
    for i=1, tiers, 1 do
      tier.lower = tonumber(utils.inputbox("Lower percentage bound for tier "..i.."?", "Lower Bound", tier.lower or "0", GetInfo(23), GetInfo(215)))
      tier.upper = tonumber(utils.inputbox("Upper percentage bound for tier "..i.."?", "Upper Bound", tier.upper or "100", GetInfo(23), GetInfo(215)))
      tier.color = tonumber(PickColour(-1)) -- get a valid color for this tier
      if tier.lower and tier.upper and (tier.color and (tier.color > 0)) then
        mode[#mode + 1] = tier
        ColourNote(RGBColourToName(tier.color),"","New tier "..tier.lower.." - "..tier.upper.." ("..RGBColourToName(tier.color)..") added.")
        tier = {}
      else
        ColourNote("red","","User pressed cancel, aborting.")
        return
      end
    end
  end
  local check, msg = checkMode(mode)
  if check then
    ColourNote("red","","Error code "..check..": "..msg)
    return
  end
  colorPrefs[#colorPrefs + 1] = mode
  PrintMode(mode, 50)
  ColourNote("yellow","","Added new mode with "..#mode.." tiers to color prefs.")
  OnPluginSaveState()
end
function checkMode(mode)
  local lowcheck = 0
  local upcheck = 0
  for i, v in ipairs(mode) do
    if upcheck > 0 and v.lower <= upcheck then -- failed lowcheck
      return 1, "tier "..i.." failed lower check (overlapping value)"
    elseif lowcheck > 0 and v.upper <= lowcheck then -- failed upcheck
      return 2, "tier "..i.." failed upper check (overlapping value)"
    elseif not RGBColourToName(v.color) then -- failed colorcheck
      return 3, "tier "..i.." failed color check (invalid color)"
    else -- no problems, continue checking
      lowcheck = v.lower
      upcheck = v.upper
    end
  end
  
  
  --[[
  Error codes:
    1: tier failed upper check (overlapping values)
    2: tier failed lower check (overlapping values)
    3: invalid color
  ]]--
  return nil
end
function colorList(name, line, args)
  ColourNote(gray,"","[",darkblue,"","Research Color Modes",gray,"","]")
  ColourTell(gray,"","[",cyan,"","Basic Mode 1",gray,"","]")
  if colorMode == 1 then ColourTell(cyan,""," Selected") end Note()
  ColourNote("lime", "", string.format("%20s %3d%%", "basic", 90))
  ColourTell(gray,"","[",cyan,"","Basic Mode 2",gray,"","]")
  if colorMode == 2 then ColourTell(cyan,""," Selected") end Note()
  ColourNote("lime", "", string.format("%20s", "alternate"),"silver","",string.format(" %3d", 90),gray,"","%")
	ColourTell(gray,"","[",cyan,"","Basic Mode 3",gray,"","]")
  if colorMode == 3 then ColourTell(cyan,""," Selected") end Note()
	Hyperlink("#Note('Clicking this link would normally add a skill to your research list!')", string.format("%20s %3d%%","hyperlinks", 90), "Sample hyperlink.", "lime", "", false, true)
  Tell("\n")
  for i, v in ipairs(colorPrefs) do
    ColourTell(gray,"","[",cyan,"","Custom Mode "..i,gray,"","]")
    if colorMode == i + 3 then
      ColourTell(cyan,"", " Selected")
    end
    Note()
    PrintMode(v, 50)
  end
end
function colorRem(name, line, args)
  for i, v in ipairs(colorPrefs) do
    if tonumber(args[1]) and (i == tonumber(args[1])) then
      ColourNote("yellow","","Removing skill color preference "..i..": ")
      PrintMode(v, 50)
      table.remove(colorPrefs, i)
      if (colorMode + 3) >= i then
        colorMode = colorMode - 1
      end
      OnPluginSaveState()
      return
    end
  end
  ColourNote("red","","Skill color preference '"..args[1].."' not found.")
end
function colorClear(name, line, args)
  colorPrefs = {}
  ColourNote("yellow","","All color highlighting modes have been cleared.")
  OnPluginSaveState()
end
function PrintMode(mode, length)
  local percent = 0
  local outStr = ""
  for i, v in ipairs(mode) do
    percent = ((v.upper-v.lower) / 100) * length
    ColourTell(RGBColourToName(v.color),"","|"..v.lower..string.rep("-", percent)..v.upper.."|")
  end
  Note()
end

function swapColorMode(name, line, args)
  colorMode = colorMode + 1
  if colorMode > #colorPrefs + 3 then -- wrap around
    colorMode = 1
  end
  if colorMode == 1 then
    ColourNote("yellow","","Practice list basic color mode: ","lime", "", string.format("%20s %3d%%", "basic", 90))
  elseif colorMode == 2 then
    ColourNote("yellow","","Practice list basic color mode: ","lime", "", string.format("%20s", "alternate"),"silver","",string.format(" %3d", 90),gray,"","%")
  elseif colorMode == 3 then
	  ColourTell("yellow","","Practice list basic color mode: ")
	  Hyperlink("#Note('Clicking this link would normally add a skill to your research list!')", string.format("%20s %3d%%","hyperlinks", 90), "Sample hyperlink.", "lime", "", false, true)
    Tell("\n")
  elseif colorMode > 3 and colorMode <= #colorPrefs + 3 then -- custom color pref selected
    ColourNote("yellow","","Practice list custom color mode "..(colorMode - 3)..": ")
    PrintMode(colorPrefs[colorMode - 3], 50)
  end
end

function researchSuccess(name, line, args)
  if currentItem == "" then -- not using external item
    local item = researchList[currentPos]
    if item and item.percent then -- have an item in list
      if item.percent ~= -1 then -- avoid incrementing manually added skills
        item.percent = item.percent + 15 -- increment percent after a success
        if item.percent >= 90 then
          item.percent = 90
          researchNext()
        else
          research()
        end
      else
        research()
      end
    end
  end
end

function research()
	if (currentItem ~= "") then
		Send("research " .. currentItem)
	else
		if (researchList[currentPos]) then
			Send("research ".. researchList[currentPos].name)
		else
			ColourNote("yellow","","Research list empty, aborting!")
			toggleOff()
		end
	end
end

function researchArg(name, line, args)
	if (args[1] ~= "") then
		currentItem = Trim(args[1])
	end
	research()
end

function contains(list, item)
	for k, v in ipairs(list) do
		if v.name==item then
			return k
		end
	end
	return nil
end

function researchStart(name, line, args)
	currentItem = ""
	-- bump research skill to top of the list if it's present
	local index = contains(researchList, "research")
	if index then
		table.insert(researchList, 1, table.remove(researchList, index))
	end
			
	if (#researchList > 0) then -- we have stuff to research!
		currentPos = 0
		researchNext()
		toggleOn()
	else                     -- nothing to research
		ColourNote("yellow","","Nothing to research!")
		toggleOff()
	end
end

function grabAdd(name, line, args)
	local grabItem = ""
	for i, v in ipairs(args) do
		if (math.fmod(i, 2) == 1) then	-- arg number is odd
			grabItem = Trim(v)
			storage.name = grabItem
		else			-- arg number is even
      storage.percent = tonumber(Trim(v))
			if storage.percent < grabPercent then
				if (grab == true) then
					internalAddItem(storage.name, storage.percent)
				end
			end
			allSkills[#allSkills + 1] = storage
			printSkill(allSkills[#allSkills].name, allSkills[#allSkills].percent)
			if (math.fmod(i, 5) == 1) then
				Tell("\n")
			end
			storage = { percent = 0, name = "" }
		end
	end
end

function printSkill(name, percent)
  if colorMode < 4 then
    local colour = "blue"
    if (percent == 100) then
      colour = "white"
    elseif (percent > 89) then
      colour = "lime"
    elseif (percent > 0) then
      colour = "orange"
    else
      colour = "red"
    end
    if colorMode == 1 then
      ColourTell(colour, "", string.format("%20s %3d%%", name,percent))
    elseif colorMode == 2 then
      ColourTell(colour, "", string.format("%20s", name),"silver","",string.format(" %3d", percent),gray,"","%")
    elseif colorMode == 3 then -- room for expansion for more coloring options here (hyperlinks, plaintext, etc)
      Hyperlink("radd "..name, string.format("%20s",name), "Add "..name.." to research list.", colour, "", false, true)
      ColourTell(colour,"",string.format(" %3d%%",percent))
    end
  else -- custom colors
    local colour = GetNormalColour(5) -- default to user's preset darkblue
    local pref = colorPrefs[colorMode - 3]
    if not pref then -- unable to load color mode!!!!!
      ColourNote("red","","Unable to load color pref, check color mode settings!")
      return
    end
    for i, v in ipairs(pref) do
      if percent >= v.lower and percent <= v.upper then
        colour = v.color
      end
    end
    ColourTell(RGBColourToName(colour),"",string.format("%20s %3d%%", name, percent))
  end
    
end
	

function printSkills()
	local triplet = 0
	for k, v in pairs(allSkills) do
		triplet = triplet + 1
		if (math.fmod(triplet, 3) == 1) then
			Tell("\n")
		end
		printSkill(v.name, v.percent)
	end
end

function toggleOn(name, line, args)
	autoResearch = true
	EnableTriggerGroup("AutoResearch", true)
	ColourNote("yellow","","Autoresearch enabled.")
end

function toggleOff(name, line, args)
	autoResearch = false
	EnableTriggerGroup("AutoResearch", false)
	EnableTriggerGroup("ResearchGrabber", false)
	ColourNote("yellow","","Autoresearch disabled.")
end

function toggleGrabOn(name, line, args)
	clearList()
	grab = true
  grabSkill = ""
  grabPercent = 90
	if (args[1] ~= "") then
    args = utils.split(Trim(args[1]), " ")
    for i, v in ipairs(args) do
      if tonumber(v) then -- percent found
        grabPercent = tonumber(v)
      else -- skill given, concat it
        grabSkill = Trim(grabSkill.. " "..v)
      end
    end
  end
	EnableTriggerGroup("ResearchGrabber", true)
	ColourNote("silver","","Grab started. Skill: '",cyan,"",grabSkill,"silver","","' Percent: ",cyan,"",grabPercent)
	Send("practice " .. grabSkill)
end


function toggleGrabOff(name, line, args)
  if grab then
	  ColourNote("silver","","Grab completed. Found ",cyan,"",#researchList,"silver",""," items. Type '",cyan,"","researchlist","silver","","' to see them.")
	  grab = false
	  researchStart()
	end
	EnableTriggerGroup("ResearchGrabber", false)
	EnableTriggerGroup("ResearchColour", false)
end

function researchNext(name, line, args)
  if currentItem == "" then -- external item is empty, use the list
    currentPos = currentPos + 1
    if (currentPos > #researchList) then  -- reached end of list
      ColourNote("lime","","Researching complete.")      -- finished
      toggleOff()
    else                                    -- middle of list
      research()  -- finally, research item
    end
  else -- finished with external item
    currentItem = ""
  end
end

function addItem(name, line, args)
  local item = { name = args[1], percent = -1 }
	researchList[#researchList + 1] = item
	ColourNote("silver","","'",cyan,"",researchList[#researchList].name,"silver","","' added to research list.")
end

function internalAddItem(name, percent)
  local item = { name = name, percent = percent }
	researchList[#researchList + 1] = item
	--Note("'" .. researchList[#researchList] .. "' added to research list. (internal)")
end

function removeItem(name, line, args)
   for i, v in ipairs(researchList) do
      if ((string.lower(v.name) == string.lower(Trim(args[1]))) or (i == tonumber(args[1]))) then
         ColourNote("silver","","Removed '",cyan,"",v.name,"silver","","' index(",cyan,"",i,"silver","",") from research list.")
         table.remove(researchList, i)
         if (currentPos > i) then  -- if our item is higher in the list than what we remove
         	currentPos = currentPos - 1  -- decrement the pointer to follow the current item
         end
         break
      else
         if (i == #researchList) then
            ColourNote("red","","Unable to find specified item in research list.")
         end
      end
   end
end

function clearGrabList()
	allSkills = {}
	EnableTriggerGroup("ResearchColour", true)
end

function clearList()
	currentItem = ""
	grabSkill = ""
	grabPercent = 90
	allSkills = {}
	researchList = {}
	ColourNote("yellow","","Research list cleared.")
	currentPos = 0
	toggleOff()
end

-- botting research is now legal, woo hooo!!
function resumeResearchFromAFK(name, line, args)
	Send("afk")
	Send("bot start")
	research()
end

function displayList(name, line, args)
  if #researchList == 0 then
    ColourNote("red","","Research list, add something first!")
  else
    ColourNote(gray,"","[",cyan,"","Research List",gray,"","]")
    ColourNote(gray,"","-----------------------------------------------")
    ColourNote(gray,"","[",darkblue,"","ID:",gray,"","] [",darkblue,"","Curr:",gray,"","] [",darkblue,"","Skill:              ",gray,"","] [",darkblue,"","Percent:",gray,"","]")
    for i, v in ipairs(researchList) do
      ColourNote(gray,"","[",cyan,"",string.format("%3s", i),gray,"","] [",cyan,"",string.format("%5s", ((i == currentPos and "*") or "")),gray,"","] [",cyan,"",string.format("%-20s", v.name),gray,"","] [",cyan,"",string.format("%-8s", v.percent or 0),gray,"","]")
    end
  end
end

function researchAuto(name, line, args)
	if (args[1] ~= "") then -- arg found
		if (Trim(args[1]) == "on") then -- turn on
			toggleOn()
		elseif (Trim(args[1]) == "off") then -- turn off
			toggleOff()
		else
			ColourNote("red","","Unrecognized argument given to researchauto: " .. args[1])
		end
	else -- no arg found
		if (autoResearch == false) then -- turn on
			toggleOn()
		else
			toggleOff()
		end
	end
end

function OnPluginSaveState()
  SetVariable("colorMode", colorMode)
  SetVariable("colorPrefs", ((colorPrefs and serialize.save("colorPrefs")) or "")) -- don't set until colorPrefs variable exists
end

-- define our help command structure
local commands = { { name = "researchHelp", desc = "Display this help file.",
                         args = { { name = "<none>", desc = "Displays brief help about every available command." },
                                  { name = "<command>", desc = "Displayed more detailed help including possible arguments for given command." },
                                }
                          },
               { name = "researchAdd", desc = "Add skills to the research list.",
                        args = { { name = "<skill>", desc = "Adds a single skill to the research list."}, 
                               }
                          },
               { name = "researchClear", desc = "Clears research list.",
                        args = { }
                          },
               { name = "researchAuto", desc = "Toggles automatic research.",
                        args = { { name = "<none>", desc = "Toggles automatic research." },
                                 { name = "<on/off>", desc = "Sets automatic research to given state." }
                               }
                          },
               { name = "researchList", desc = "Print current research list.",
                        args = { }
                          },
               { name = "researchStart", desc = "Initiates automatic research from beginning of list.",
                        args = { }
                          },
               { name = "research", desc = "Performs research.. duh",
                        args = { { name = "<none>", desc = "Researches previously assigned item."},
                                 { name = "<skill>", desc = "Assigns new skill and starts researching it."} 
                               }
                          },
               { name = "researchNext", desc = "Skips to next skill in research list.",
                        args = { }
                          },
               { name = "researchGrab", desc = "Scans practice list for skills, loads them into research list and begins all at once.",
                        args = { { name = "<class>", desc = "Scans only the given class for skills below 90%."},
                                 { name = "<percent>", desc = "Adds only skills below given percentage." },
                                 { name = "<class> <percent>", desc = "Class and percent can be given in any order." }, 
                               }
                          },
               { name = "researchColorMode", desc = "Cycles through available options for color highlighting of practice list.",
                        args = { }
                          },
               { name = "researchColorAdd", desc = "Adds custom color highlighting options for practice list.",
                        args = { { name = "<none>", desc = "Adds custom color rules using prompts." },
                                 { name = "<lower> <upper> <color> ...", desc = "Adds custom color rules by giving 'number number color' in pairs of 3, with no limit on number of groups." },
                               }
                          },
               { name = "researchColorList", desc = "Prints available practice list color options.",
                        args = { }
                          },
               { name = "researchColorRem", desc = "Deletes a custom practice list color option.",
                        args = { { name = "<number>", desc = "Deletes the given custom color option." }, }
                          },
               { name = "researchColorClear", desc = "Clears all custom practice list color options.",
                        args = { }
                          },
              }
                        
  --[[ 


  ]]--

function researchHelp(name, line, args)
  local found = false
  if args[1] == "" then -- show general help
    ColourNote("white","black","LotJResearch v"..VERSION.." by "..AUTHOR..". Enter 'researchhelp <command>' for more detailed information.")
    for a, b in ipairs(commands) do -- commands
      local command = b
      ColourNote("silver","black",string.format("%-20s", command.name).." : "..command.desc)
    end
    Note("")
  else -- entered something
    ColourNote("white","black","LotJResearch v"..VERSION.." by "..AUTHOR..". Enter 'researchhelp' for more general information.")
    for a, b in ipairs(commands) do -- scroll through commands
      if (string.lower(b.name) == string.lower(Trim(args[1]))) then -- found our argument
        found = true
        ColourNote("silver","black",b.name .. " : " .. b.desc)
        ColourNote("silver","black","Available arguments:")
        if #b.args == 0 then -- no arguments
          ColourNote("silver","black","   None.")
        else -- arguments to print
          for i, k in ipairs(b.args) do
            ColourNote("silver","black",string.format("%20s", k.name).." : " .. k.desc)
          end -- end print arguments
        end -- end no arguments
        Note("")
      end -- end found command
    end -- end scroll commands
    if not found then
      ColourNote("silver","black","Command '"..args[1].."' not found.")
    end
  end -- end no input
end

  ]]> 
  </script>
 <!--   Plugin help    -->
  <aliases>
  <alias script="OnHelp" match="LotJResearch:help" enabled="y" /> 
  </aliases>
 <script>
 <![CDATA[ function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

  ]]> 
  </script>
  </muclient>