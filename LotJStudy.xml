<?xml version="1.0" encoding="iso-8859-1" ?> 
<!DOCTYPE muclient> 
<!--  Saved on Sunday, April 04, 2010, 8:43 PM   --> 
<!--  MuClient version 4.40   --> 
<!--  Plugin "LotJStudying" generated by Plugin Wizard   --> 
<muclient>
<plugin name="LotJStudy" author="@Ilyena modified by @Johnson" id="0b90ce53347f37f35ff36fcf" language="Lua" purpose="To make studying easier!" save_state="y" date_written="2010-04-04 20:42:01" requires="4.40" version="1.04">
<description trim="y">
<![CDATA[ 'Studyhelp' - To see the commands available in the game.

The code will automatically go through the list, studying everything at once or one item at a time.

  ]]> 
  </description>
  </plugin>
<!--   Get our standard constants   --> 
  <include name="constants.lua" /> 
<!--   Triggers    --> 
<triggers>
  <trigger enabled="n" group="LotJStudy" match="^You don\'t see anything like that nearby to study\.$" name="MissingItem" regexp="y" script="studyNext" sequence="100" /> 
  <trigger enabled="n" group="LotJStudy" match="^You must raise your science level before learning more about this knowledge\.$" name="ScienceTooLow" regexp="y" script="studyNext" sequence="100" /> 
  <trigger enabled="n" group="LotJStudy" match="^What the hell is this thing anyways\?$" name="BadItem" regexp="y" script="studyNext" sequence="100" /> 
  <trigger enabled="n" group="LotJStudy" match="^You study it for some time\, but fail to learn anything about it\.$" name="StudyFailure" regexp="y" script="studyEnded" sequence="100" /> 
  <trigger enabled="n" group="LotJStudy" match="^You may now bot again\.$" name="BotStartStudying" regexp="y" script="startBottingStudy" sequence="100" /> 
  <trigger enabled="n" group="LotJStudy" match="^After some time studying you feel you know more\.$" name="ContinueStudying" regexp="y" script="studyEnded" sequence="100" /> 
  <trigger enabled="n" group="LotJStudy" keep_evaluating="y" match="^You are now an adept of (.*)! (.*)!$" name="FinishedItem" regexp="y" script="finishedItem" sequence="100" /> 
  <trigger enabled="n" group="LotJStudy" match="^You are no longer afk\.$" name="afkoff" regexp="y" script="afkOff" sequence="100" />
  <trigger enabled="n" group="LotJStudy" match="^You are now afk\.$" name="afkon" regexp="y" script="afkOn" sequence="100" />
  </triggers>
<!--   Aliases    --> 
<aliases>
  <alias name="AddStudyItem" script="addStudyItem" match="^studyadd (.*)$" enabled="y" group="LotJStudy" regexp="y" sequence="100" /> 
  <alias name="RemoveStudyItem" script="removeStudyItem" match="^studyrem (.*)$" enabled="y" group="LotJStudy" regexp="y" sequence="100" /> 
  <alias name="DisplayStudyCommands" script="displayStudyCommands" match="studyhelp" enabled="y" group="LotJStudy" send_to="1" sequence="100" /> 
  <alias name="ClearList" script="clearList" match="studyclear" enabled="y" group="LotJStudy" send_to="1" sequence="100" /> 
  <alias name="AutoStudyStatus" script="setStudyStatus" match="^studyauto( +(.*))?$" enabled="y" group="LotJStudy" regexp="y" ignore_case="y" sequence="100" /> 
  <alias name="ToggleStudyMode" script="setStudyMode" match="studymode" enabled="y" group="LotJStudy" send_to="1" ignore_case="y" sequence="100" />
  <alias name="ShowStudyList" script="showStudyList" match="studylist" enabled="y" group="LotJStudy" send_to="1" sequence="100" /> 
  <alias name="StartStudying" script="startStudying" match="studystart" enabled="y" group="LotJStudy" send_to="1" ignore_case="y" sequence="100" /> 
  <alias name="SkipItem" script="studyNext" match="studynext" enabled="y" group="LotJStudy" send_to="1" sequence="100" /> 
  <alias name="ToggleAutoStudyStatus" script="setStudyStatus" match="studyauto" enabled="y" group="LotJStudy" send_to="1" ignore_case="y" sequence="100" /> 
  <alias name="Study" script="studyArg" match="^study(?:\s+(.*))?$" regexp="y" enabled="y" group="LotJStudy" ignore_case="y" sequence="100" />
  <alias name="StudyContainer" script="setContainer" match="^studycontainer( +(.*))?$" regexp="y" enabled="y" group="LotJStudy" ignore_case="y" sequence="100" />

  </aliases>
<!--   Script    --> 
<script>
<![CDATA[ 

require "serialize"

studyList = {}
afk = false
studyItem =     GetVariable("studyItem") or ""
studyStatus =   ((GetVariable("studyStatus") or "false") == "true") -- default to false "deactivated"
studyMode =     ((GetVariable("studyMode") or "false") == "true") -- default to false "single item" mode, this is a trick to convert from string to boolean
currentPos =    tonumber(GetVariable("currentPos") or 0)
studyNum =      tonumber(GetVariable("studyNum") or 0)
studyContainer = GetVariable("studyContainer") or ""
loadstring (GetVariable("studyList") or "")()

function OnPluginInstall()
  EnableTriggerGroup("LotJStudy", studyStatus) -- this is to reactivate upon plugin reload
end

function OnPluginSaveState()
  SetVariable("studyItem", studyItem)
  SetVariable("studyStatus", tostring(studyStatus))
  SetVariable("studyMode", tostring(studyMode))
  SetVariable("currentPos", tostring(currentPos))
  SetVariable("studyNum", tostring(studyNum))
  SetVariable("studyContainer", studyContainer)
  SetVariable("studyList", serialize.save("studyList"))
end

function showStudyList(name, line, args)
  ColourNote("silver","","Study list contains ","cyan","",#studyList,"silver",""," items: ")
  for i, v in ipairs(studyList) do
    ColourNote("darkgray","",i..": ",((currentPos==i and "cyan") or "darkgray"),"",((currentPos==i and "--]> ") or "")..v..((currentPos==i and " <[--") or ""))
  end
  if (studyContainer ~= "") then
    ColourNote("silver","","Using container as storage: ","cyan","",studyContainer)
  end
  ColourNote("silver","",((studyMode and "Studying multiple items at once.") or "Studying one item at a time."))
end

function setStudyMode(name, line, args)
  studyMode = not studyMode
  ColourNote("silver","",((studyMode and "Studying multiple items at once.") or "Studying one item at a time."))
end

function setStudyStatus(name, line, args)
  if studyStatus then
    toggleOff()
  else
    toggleOn()
  end
end

function toggleOn(name, line, args)
  studyStatus = true
  EnableTriggerGroup("LotJStudy", true)
  ColourNote("yellow","","LotJStudy activated.")
end
function toggleOff(name, line, args)
  studyStatus = false
  EnableTriggerGroup("LotJStudy", false)
  ColourNote("yellow","","LotJStudy deactivated.")
end

function displayStudyCommands(name, line, wildcards)
  ColourNote("silver","","LotJStudy help info:")
  ColourNote("white","","Study                         - Study current item")
  ColourNote("white","","Studystart                    - Begin studying from front of list")
  ColourNote("white","","Studyadd <item>,<item>,<item> - Add objects to study list")
  ColourNote("white","","Studyrem <item>               - Remove objects from study list")
  ColourNote("white","","Studylist                     - Display study list")
  ColourNote("white","","Studynext                     - Skip item in study list")
  ColourNote("white","","Studyauto                     - Toggles automatic study")
  ColourNote("white","","StudyContainer <container>    - If your study items are inside a container, specify that here")
  ColourNote("white","","Studymode                     - Toggles studying single item or the whole list")
  ColourNote("white","","Studyclear                    - Erase stored study data")
end -- function

function startStudying(name, line, wildcards)
  if (#studyList > 0) then -- we have stuff to study!
    currentPos = 0
    studyNext()
    toggleOn()
  else                     -- nothing to study
    ColourNote("red","","Nothing to study!")
    toggleOff()
  end
end

function setContainer(name, line, args)
  if (Trim(args[1]) ~= "") then
    studyContainer = Trim(args[1])
    ColourNote("white","","Studycontainer set to ","cyan","",studyContainer)
  else
    studyContainer = ""
    ColourNote("red","","Studycontainer removed.")
  end
end

function studyArg(name, line, args)
  args = utils.split(args[1], " ")
  if args[1] ~= nil and args[1] ~= "" and #args == 1 then -- entered one argument, start studying that item
    studyItem = Trim(args[1])
  elseif studyItem ~= "" then
    -- do nothing here so we will fall back to study()
  elseif studyList[currentPos] then -- no argument, study list has valid item, study it
    studyItem = studyList[currentPos]
  else -- no argument, no valid item in list
    Send("study "..table.concat(args, " ")) -- pass through whatever we typed here
    return
  end
  study()
end

function study(name, line, args)
  if studyItem ~= "" and studyItem ~= nil then
    Send("study ".. studyItem)
  end
end

function finishedItem()
  if (studyContainer ~= "") then      -- if you're using a container
    Send("put " .. studyList[currentPos] .. " " .. studyContainer)   -- return item to container
  end
  internalRemove(currentPos)
  currentPos = currentPos - 1 -- decrement list pointer to properly get/take from container  
  studyNext()
end

function internalRemove(item)
   t = #studyList
   for i, v in ipairs(studyList) do
      if (v == item or (i == tonumber(item))) then
         ColourNote("red","","Removed '" .. v .. "' from study list.")
         table.remove(studyList, i)
         if (currentPos > i) then  -- if our item is higher in the list than what we remove
           currentPos = currentPos - 1  -- decrement the pointer to follow the current item
         end
         break
      else
         if (t == i) then
            ColourNote("red","","Item '" .. item .. "' not found in study list.")
         end -- if
      end -- if
   end -- for
end -- function

function studyNext(name, line, args)
  if (currentPos > 0) then           -- if you're working on an previous item
    if (studyContainer ~= "") then      -- if you're using a container
      Send("put " .. studyList[currentPos] .. " " .. studyContainer)   -- return item to container
    end
  end
  currentPos = currentPos + 1
  if (currentPos > #studyList) then  -- reached end of list
    if not studyMode then     -- only studying each item once
      ColourNote("yellow","","Studying complete.")      -- finished
      toggleOff()
    else                  -- start loop over again
      ColourNote("yellow","","Looping back to beginning.")
      startStudying()
    end
  else                                    -- middle of list
    if (studyContainer ~= "") then          -- if you're using a container
      Send("get " .. studyList[currentPos] .. " " .. studyContainer)  -- get next item from container
    end
    studyItem = studyList[currentPos]
    study()  -- finally, study item
  end
end

function studyEnded(name, line, args)
  if studyMode then -- if studying multiple items
    studyNum = studyNum + 1       -- increment index
    -- Note("studyNum:" .. studyNum)
    if (studyNum > 9) then        -- if we're done with that item
      -- Note("Sliding to next item")
      studyNum = 0              -- reset counter
      studyNext()               -- move to next item
    else                          -- not done with item
      study()                   -- study item
    end
  else                              -- not studying multiple items
    study()                       -- study item
  end
end

function afkOn(name, line, args)
  afk = true
end

function afkOff(name, line, args)
  afk = false
end

function addStudyItem(name, line, wildcards)
  local addLines = utils.split(wildcards[1], ",")
  if addLines then
    for i=1,#addLines, 1 do
      studyList[#studyList + 1] = addLines[i]
      ColourNote("silver","","Added '","cyan","",studyList[#studyList],"silver","","' to study list.")
    end
  else
    studyList[#studyList + 1] = wildcards[1]
    ColourNote("silver","","Added '","cyan","",studyList[#studyList],"silver","","' to study list.")
  end
end -- function

function startBottingStudy(name, line, wildcards)
  if (afk==true) then
    Send("afk")
  end
  Send("bot start")
  study()
end

function removeStudyItem(name, line, wildcards)
   t = #studyList
   for i, v in ipairs(studyList) do
      if (v == wildcards[1] or (i == tonumber(wildcards[1]))) then
         ColourNote("red","","Removed '" .. v .. "' from study list.")
         table.remove(studyList, i)
         if (currentPos > i) then  -- if our item is higher in the list than what we remove
           currentPos = currentPos - 1  -- decrement the pointer to follow the current item
         end
         break
      else
         if (t == i) then
            ColourNote("red","","Item '" .. wildcards[1] .. "' not found in study list.")
         end -- if
      end -- if
   end -- for
end -- function

function clearList(name, line, wildcards)
  if (currentPos > 0) then           -- if you're working on an previous item
    if (studyContainer ~= "") then      -- if you're using a container
      Send("put " .. studyList[currentPos] .. " " .. studyContainer)   -- return item to container
    end
  end
  studyList = {}
  ColourNote("yellow","","Study list cleared.")
  currentPos = 0
  toggleOff()
  OnPluginSaveState() -- update stored values
end -- function

  ]]> 
  </script>
 <!--   Plugin help    --> 
 <aliases>
  <alias script="OnHelp" match="LotJStudying:help" enabled="y" /> 
  </aliases>
 <script>
 <![CDATA[ function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

  ]]> 
  </script>
  </muclient>