<?xml version="1.0" encoding="iso-8859-1" ?> 
<!DOCTYPE muclient> 
<!--  Saved on Sunday, July 04, 2012, 5:39 AM   -->  
<muclient>
<plugin name="LotJResearch" author="@Johnson" id="0b90ce53347f37f34ff36fcf" language="Lua" purpose="Automatic Researching" save_state="y" requires="4.40" version="1.77">
<description trim="y">
<![CDATA[ 'ResearchHelp' - To see the commands available in the game.

Automatically populate and research items that need to be researched.

  ]]> 
  </description>
  </plugin>
<!--   Get our standard constants   --> 
  <include name="constants.lua" /> 
<!--   Triggers    --> 
<triggers>
  <trigger name="ResearchSecure" script="researchNext" match="^You cannot learn more about that from books\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchComplete" script="researchNext" match="^You can\'t learn (any )?more about that from books(\!|\.)$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchSmuggling" script="researchNext" match="^You can\'t learn smuggling skills from a book\!$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchBH" script="researchNext" match="^You can\'t learn bounty hunting skills from a book\!$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchBowcaster" script="researchNext" match="^You aren't going to learn that from a book\. Go find a Wookiee\!$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchFlurry" script="researchNext" match="^Go learn it the hard way\, sissy\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchForce" script="researchNext" match="^You\'re not going to learn force spells from a book\. Trust me\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchScience" script="researchNext" match="^You can\'t learn about that in books\. Go find a teacher\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchSuccess" script="researchSuccess" match="^You finish your studies and feel much more skilled\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchFailure" script="research" match="^You study for hours on end, but fail to gather any knowledge\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchResumeAFK" script="resumeResearchFromAFK" match="^You may now bot again\.$" enabled="n" group="AutoResearch" regexp="y" sequence="100" />
  <trigger name="ResearchGrabThree" script="grabAdd" match="^([\s\w,-]+)(\s+\d+)\%([\s\w,-]+)(\s+\d+)\%([\s\w,-]+)(\s+\d+)\%(\s?)*$" regexp="y" enabled="n" omit_from_output="y" omit_from_log="y" group="ResearchColour" sequence="100" />
  <trigger name="ResearchGrabTwo" script="grabAdd" match="^([\s\w,-]+)(\s+\d+)\%([\s\w,-]+)(\s+\d+)\%(\s?)*$" regexp="y" enabled="n" omit_from_output="y" omit_from_log="y" group="ResearchColour" sequence="100" />
  <trigger name="ResearchGrabOne" script="grabAdd" match="^([\s\w,-]+)(\s+\d+)\%(\s?)*$" regexp="y" enabled="n" omit_from_output="y" omit_from_log="y" group="ResearchColour" sequence="100" />
  <trigger name="ResearchGrabDone" script="toggleGrabOff" match="^To see a shorter practice list\, type PRACTICE \<class name\>\.$" regexp="y" group="ResearchGrabber" enabled="n" sequence="100" />
  <trigger name="Allskillsclear" script="clearGrabList" match="^([\s,-]+)Skills([\s,-]+)$" regexp="y" enabled="y" group="ResearchStarter" sequence="100" />
</triggers>
<!--   Aliases    --> 
<aliases>
  <alias name="ResearchAdd" script="addItem" match="^researchadd (.*)$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" /> 
  <alias name="ResearchAddShort" script="addItem" match="^radd (.*)$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" /> 
  <alias name="ResearchRem" script="removeItem" match="^researchrem (.*)$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias name="DisplayResearchCommands" script="displayResearchCommands" match="researchhelp" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias name="ResearchClear" script="clearList" match="researchclear" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias name="ResearchAuto" script="researchAuto" match="^researchAuto(.*)?$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias name="ResearchDisplay" script="displayList" match="researchList" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias name="ResearchStart" script="researchStart" match="researchStart" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias name="Research" script="researchArg" match="^research( +(.*))?$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" /> 
  <alias name="ResearchNext" script="researchNext" match="researchNext" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
  <alias name="ResearchGrab" script="toggleGrabOn" match="^researchgrab(.*)?" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias name="printskills" script="printSkills" match="^printskills$" enabled="y" group="AutoResearchCmd" regexp="y" ignore_case="y" sequence="100" />
  <alias name="Researchcolormodecmd" script="swapColorMode" match="researchColorMode" enabled="y" group="AutoResearchCmd" ignore_case="y" sequence="100" />
</aliases>
<!--   Script    --> 
<script>
<![CDATA[ 

require "pairsbykeys"
local autoResearch = false
local researchList = {}
local currentPos = 1
local currentItem = ""
local grabSkill = ""
local grabPercent = 90
local allSkills = {}
local grab = false
local colorMode = tonumber(GetVariable("colorMode")) or 1
local storage = { percent = 0, name = "" }

local darkblue = RGBColourToName(GetNormalColour(5))
local gray = RGBColourToName(GetBoldColour(1))
local cyan = RGBColourToName(GetBoldColour(7))

function displayResearchCommands(name, line, args)
   ColourNote("silver","","Research <skill>                       - Resume research or start on skill independent of the list")
   ColourNote("silver","","ResearchStart                          - Begin new research session from front of list")
   ColourNote("silver","","ResearchGrab <skill tree> <percentage> - Grab skills from optional skill tree that")
   ColourNote("silver","","                                         are below optional percentage barrier")
   ColourNote("silver","","                                         (If no arguments are given it will add every")
   ColourNote("silver","","                                          item in your skill list that is below 90%)")
   ColourNote("silver","","ResearchAdd <skill>                    - Manually add a skill to the list")
   ColourNote("silver","","ResearchRem <skill/#>                  - Remove skill in list by name or index number")
   ColourNote("silver","","ResearchList                           - Display list contents")
   ColourNote("silver","","ResearchNext                           - Skip current item in list")
   ColourNote("silver","","ResearchClear                          - Clear all research variables")
   ColourNote("silver","","ResearchColorMode                      - Switch skill highlighting modes")
   ColourNote("silver","","ResearchAuto (on/off)                  - Turns automatic researching on or off")
end -- function

function swapColorMode(name, line, args)
  if colorMode == 1 then
    colorMode = 2
	  ColourNote("yellow","","Practice list color mode: ","lime", "", string.format("%20s", "alternate"),"silver","",string.format(" %3d", 90),gray,"","%")
  elseif colorMode == 2 then
    colorMode = 3
    ColourTell("yellow","","Practice list color mode: ")
	  Hyperlink("#Note('Clicking this link would normally add a skill to your research list!')", string.format("%20s %3d%%","hyperlinks", 90), "Sample hyperlink.", "lime", "", false, true)
    Tell("\n")
  elseif colorMode == 3 then
    colorMode = 1
	  ColourNote("yellow","","Practice list color mode: ","lime", "", string.format("%20s %3d%%", "basic", 90))
  end
end

function OnPluginSaveState()
  SetVariable("colorMode", colorMode)
end

function researchSuccess(name, line, args)
  if currentItem == "" then -- not using external item
    local item = researchList[currentPos]
    if item and item.percent then -- have an item in list
      if item.percent ~= -1 then -- avoid incrementing manually added skills
        item.percent = item.percent + 15 -- increment percent after a success
        if item.percent >= 90 then
          item.percent = 90
          researchNext()
        else
          research()
        end
      else
        research()
      end
    end
  end
end

function research()
	if (currentItem ~= "") then
		Send("research " .. currentItem)
	else
		if (researchList[currentPos]) then
			Send("research ".. researchList[currentPos].name)
		else
			ColourNote("yellow","","Research list empty, aborting!")
			toggleOff()
		end
	end
end

function researchArg(name, line, args)
	if (args[1] ~= "") then
		currentItem = Trim(args[1])
	end
	research()
end

function contains(list, item)
	for k, v in ipairs(list) do
		if v.name==item then
			return k
		end
	end
	return nil
end

function researchStart(name, line, args)
	currentItem = ""
	-- bump research skill to top of the list if it's present
	local index = contains(researchList, "research")
	if index then
		table.insert(researchList, 1, table.remove(researchList, index))
	end
			
	if (#researchList > 0) then -- we have stuff to research!
		currentPos = 0
		researchNext()
		toggleOn()
	else                     -- nothing to research
		ColourNote("yellow","","Nothing to research!")
		toggleOff()
	end
end

function grabAdd(name, line, args)
	local grabItem = ""
	for i, v in ipairs(args) do
		if (math.fmod(i, 2) == 1) then	-- arg number is odd
			grabItem = Trim(v)
			storage.name = grabItem
		else			-- arg number is even
      storage.percent = tonumber(Trim(v))
			if storage.percent < grabPercent then
				if (grab == true) then
					internalAddItem(storage.name, storage.percent)
				end
			end
			allSkills[#allSkills + 1] = storage
			printSkill(allSkills[#allSkills].name, allSkills[#allSkills].percent)
			if (math.fmod(i, 5) == 1) then
				Tell("\n")
			end
			storage = { percent = 0, name = "" }
		end
	end
end

function printSkill(name, percent)
	local colour = "blue"
	if (percent == 100) then
		colour = "white"
	elseif (percent > 89) then
		colour = "lime"
	elseif (percent > 0) then
		colour = "orange"
	else
		colour = "red"
	end
	if colorMode == 1 then
	  ColourTell(colour, "", string.format("%20s %3d%%", name,percent))
  elseif colorMode == 2 then
	  ColourTell(colour, "", string.format("%20s", name),"silver","",string.format(" %3d", percent),gray,"","%")
	elseif colorMode == 3 then -- room for expansion for more coloring options here (hyperlinks, plaintext, etc)
	  Hyperlink("radd "..name, string.format("%20s",name), "Add "..name.." to research list.", colour, "", false, true)
	  ColourTell(colour,"",string.format(" %3d%%",percent))
	end
end
	

function printSkills()
	local triplet = 0
	for k, v in pairs(allSkills) do
		triplet = triplet + 1
		if (math.fmod(triplet, 3) == 1) then
			Tell("\n")
		end
		printSkill(v.name, v.percent)
	end
end

function toggleOn(name, line, args)
	autoResearch = true
	EnableTriggerGroup("AutoResearch", true)
	ColourNote("yellow","","Autoresearch enabled.")
end

function toggleOff(name, line, args)
	autoResearch = false
	EnableTriggerGroup("AutoResearch", false)
	EnableTriggerGroup("ResearchGrabber", false)
	ColourNote("yellow","","Autoresearch disabled.")
end

function toggleGrabOn(name, line, args)
	clearList()
	grab = true
	if (args[1] ~= "") then
		if (string.find(args[1], "%d", 1)) then -- number found
			grabSkill = Trim(string.sub(args[1], 1, string.find(args[1], "%d", 1)-1))
			grabPercent = tonumber(string.sub(args[1], string.find(args[1], "%d", 1), string.len(args[1])))
		else -- no number found
			grabSkill = Trim(args[1])
		end
	end
	EnableTriggerGroup("ResearchGrabber", true)
	ColourNote("silver","","Grab started. Skill: '",cyan,"",grabSkill,"silver","","' Percent: ",cyan,"",grabPercent)
	Send("practice " .. grabSkill)
end


function toggleGrabOff(name, line, args)
  if grab then
	  ColourNote("silver","","Grab completed. Found ",cyan,"",#researchList,"silver",""," items. Type '",cyan,"","researchlist","silver","","' to see them.")
	  grab = false
	  researchStart()
	end
	EnableTriggerGroup("ResearchGrabber", false)
	EnableTriggerGroup("ResearchColour", false)
end

function researchNext(name, line, args)
  if currentItem == "" then -- external item is empty, use the list
    currentPos = currentPos + 1
    if (currentPos > #researchList) then  -- reached end of list
      ColourNote("lime","","Researching complete.")      -- finished
      toggleOff()
    else                                    -- middle of list
      research()  -- finally, research item
    end
  else -- finished with external item
    currentItem = ""
  end
end

function addItem(name, line, args)
  local item = { name = args[1], percent = -1 }
	researchList[#researchList + 1] = item
	ColourNote("silver","","'",cyan,"",researchList[#researchList].name,"silver","","' added to research list.")
end

function internalAddItem(name, percent)
  local item = { name = name, percent = percent }
	researchList[#researchList + 1] = item
	--Note("'" .. researchList[#researchList] .. "' added to research list. (internal)")
end

function removeItem(name, line, args)
   for i, v in ipairs(researchList) do
      if ((string.lower(v.name) == string.lower(Trim(args[1]))) or (i == tonumber(args[1]))) then
         ColourNote("silver","","Removed '",cyan,"",v.name,"silver","","' index(",cyan,"",i,"silver","",") from research list.")
         table.remove(researchList, i)
         if (currentPos > i) then  -- if our item is higher in the list than what we remove
         	currentPos = currentPos - 1  -- decrement the pointer to follow the current item
         end
         break
      else
         if (i == #researchList) then
            ColourNote("red","","Unable to find specified item in research list.")
         end
      end
   end
end

function clearGrabList()
	allSkills = {}
	EnableTriggerGroup("ResearchColour", true)
end

function clearList()
	currentItem = ""
	grabSkill = ""
	grabPercent = 90
	allSkills = {}
	researchList = {}
	ColourNote("yellow","","Research list cleared.")
	currentPos = 0
	toggleOff()
end

-- botting research is now legal, woo hooo!!
function resumeResearchFromAFK(name, line, args)
	Send("afk")
	Send("bot start")
	research()
end

function displayList(name, line, args)
  if #researchList == 0 then
    ColourNote("red","","Research list, add something first!")
  else
    ColourNote(gray,"","[",cyan,"","Research List",gray,"","]")
    ColourNote(gray,"","-----------------------------------------------")
    ColourNote(gray,"","[",darkblue,"","ID:",gray,"","] [",darkblue,"","Curr:",gray,"","] [",darkblue,"","Skill:              ",gray,"","] [",darkblue,"","Percent:",gray,"","]")
    for i, v in ipairs(researchList) do
      ColourNote(gray,"","[",cyan,"",string.format("%3s", i),gray,"","] [",cyan,"",string.format("%5s", ((i == currentPos and "*") or "")),gray,"","] [",cyan,"",string.format("%-20s", v.name),gray,"","] [",cyan,"",string.format("%-8s", v.percent or 0),gray,"","]")
    end
  end
end

function researchAuto(name, line, args)
	if (args[1] ~= "") then -- arg found
		if (Trim(args[1]) == "on") then -- turn on
			toggleOn()
		elseif (Trim(args[1]) == "off") then -- turn off
			toggleOff()
		else
			ColourNote("red","","Unrecognized argument given to researchauto: " .. args[1])
		end
	else -- no arg found
		if (autoResearch == false) then -- turn on
			toggleOn()
		else
			toggleOff()
		end
	end
end

  ]]> 
  </script>
 <!--   Plugin help    -->
  <aliases>
  <alias script="OnHelp" match="LotJResearch:help" enabled="y" /> 
  </aliases>
 <script>
 <![CDATA[ function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

  ]]> 
  </script>
  </muclient>