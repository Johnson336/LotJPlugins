<?xml version="1.0" encoding="iso-8859-1" ?> 
<!DOCTYPE muclient> 
<!--  Saved on Sunday, April 04, 2010, 8:43 PM   --> 
<!--  MuClient version 4.40   --> 
<!--  Plugin "LotJStudying" generated by Plugin Wizard   --> 
<muclient>
<plugin name="LotJStudying" author="@Ilyena modified by @Johnson" id="0b90ce53347f37f35ff36fcf" language="Lua" purpose="To make studying easier!" save_state="y" date_written="2010-04-04 20:42:01" requires="4.40" version="1.04">
<description trim="y">
<![CDATA[ 'Studyhelp' - To see the commands available in the game.

The code will automatically go through the list, studying everything at once or one item at a time.

  ]]> 
  </description>
  </plugin>
<!--   Get our standard constants   --> 
  <include name="constants.lua" /> 
<!--   Triggers    --> 
<triggers>
  <trigger enabled="n" group="Studying" match="^You don\'t see anything like that nearby to study\.$" name="MissingItem" regexp="y" script="studyNext" sequence="100" /> 
  <trigger enabled="n" group="Studying" match="^You must raise your science level before learning more about this knowledge\.$" name="ScienceTooLow" regexp="y" script="studyNext" sequence="100" /> 
  <trigger enabled="n" group="Studying" match="^What the hell is this thing anyways\?$" name="BadItem" regexp="y" script="studyNext" sequence="100" /> 
  <trigger enabled="n" group="Studying" match="^You study it for some time\, but fail to learn anything about it\.$" name="StudyFailure" regexp="y" script="StudyEnded" sequence="100" /> 
  <trigger enabled="n" group="Studying" match="^You may now bot again\.$" name="BotStartStudying" regexp="y" script="StartBottingStudy" sequence="100" /> 
  <trigger enabled="n" group="Studying" match="^After some time studying you feel you know more\.$" name="ContinueStudying" regexp="y" script="StudyEnded" sequence="100" /> 
  <trigger enabled="n" group="Studying" keep_evaluating="y" match="^You are now an adept of (.*)! (.*)!$" name="FinishedItem" regexp="y" script="finishedItem" sequence="100" /> 
  <trigger enabled="n" group="Studying" match="^You are no longer afk\.$" name="afkoff" regexp="y" script="afkOff" sequence="100" />
  <trigger enabled="n" group="Studying" match="^You are now afk\.$" name="afkon" regexp="y" script="afkOn" sequence="100" />
  </triggers>
<!--   Aliases    --> 
<aliases>
  <alias name="AddStudyItem" script="AddStudyItem" match="^studyadd (.*)$" enabled="y" group="Studying" regexp="y" sequence="100" /> 
  <alias name="RemoveStudyItem" script="RemoveStudyItem" match="^studyrem (.*)$" enabled="y" group="Studying" regexp="y" sequence="100" /> 
  <alias name="DisplayStudyCommands" script="DisplayStudyCommands" match="studyhelp" enabled="y" group="Studying" send_to="1" sequence="100" /> 
  <alias name="ClearList" script="ClearList" match="studyclear" enabled="y" group="Studying" send_to="1" sequence="100" /> 
  <alias name="AutoStudyStatus" script="SetStudyStatus" match="^studyauto (.*)$" enabled="y" group="StudyToggle" regexp="y" ignore_case="y" sequence="100" /> 
  <alias name="ToggleStudyMode" script="SetStudyMode" match="studymode" enabled="y" group="StudyToggle" send_to="1" ignore_case="y" sequence="100" />
  <alias name="SetStudyMode" script="SetStudyMode" match="^studymode (.*)$" enabled="y" group="StudyToggle" regexp="y" ignore_case="y" sequence="100" />
  <alias name="ShowStudyList" script="ShowStudyList" match="studylist" enabled="y" group="Studying" send_to="1" sequence="100" /> 
  <alias name="StartStudying" script="StartStudying" match="studystart" enabled="y" group="Studying" send_to="1" ignore_case="y" sequence="100" /> 
  <alias name="SkipItem" script="studyNext" match="studyskip" enabled="y" group="Studying" send_to="1" sequence="100" /> 
  <alias name="ToggleAutoStudyStatus" script="SetStudyStatus" match="studyauto" enabled="y" group="StudyToggle" send_to="1" ignore_case="y" sequence="100" /> 
  <alias name="Study" script="studyArg" match="^study(?:\s+(.*))?$" regexp="y" enabled="y" group="Studying" ignore_case="y" sequence="100" />
  <alias name="StudyContainer" script="setContainer" match="^studycontainer( +(.*))?$" regexp="y" enabled="y" group="Studying" ignore_case="y" sequence="100" />

  </aliases>
<!--   Script    --> 
<script>
<![CDATA[ 

studyList = {}
studyStatus = false
studyitem = ""
studyMode = "single"
currentPos = 0
studyNum = 0
studyContainer = ""
afk = false

function ShowStudyList(name, line, wildcards)
   Note("Study List Contains " .. #studyList .. " Items: ")
   for i = 1, #studyList, 1 do
      if (i ~= currentPos) then
         Note (studyList[i])
      else
         ColourNote("lime","", "-->]" .. studyList[i] .. "[<--")
      end
   end
   if (studyContainer) then
   	Note("Studycontainer set to: " .. studyContainer)
   end
end

function SetStudyMode(name, lines, args)
	if (args[1] == "single") then
		studyMode = "single"
		Note("Studymode: single")
	elseif (args[1] == "multiple") then
		studyMode = "multiple"
		Note("Studymode: multiple")
	else
		if (studyMode == "single") then
			studyMode = "multiple"
			Note("Studymode: multiple")
		else
			studyMode = "single"
			Note("Studymode: single")
		end
	end
end

function SetStudyStatus(name, line, args)
	if (args[1]) then
		if (args[1] == "on") then
			toggleOn()
		end
		if (args[1] == "off") then
			toggleOff()
		end
	else
		if (studyStatus == true) then
			toggleOff()
		else
			toggleOn()
		end
	end
end

function DisplayStudyCommands(name, line, wildcards)
   Note("Study - Study current item")
   Note("Studystart - Begin studying from front of list")
   Note("Studyadd # - Add Object # to Study List")
   Note("Studyrem # - Remove Object # from Study List")
   Note("Studylist - Display Study Objects")
   Note("Studyskip - Skip item in Study List")
   Note("Studyauto (on/off) - Turns autostudying on/off")
   Note("StudyContainer - If your study items are inside a container, specify that here")
   Note("Studymode (single/multiple) - Studies a single item or the entire list at once")
end -- function

function StartStudying(name, line, wildcards)
	if (#studyList > 0) then -- we have stuff to study!
		currentPos = 0
		studyNext()
		toggleOn()
	else                     -- nothing to study
		Note("Nothing to study!")
		toggleOff()
	end
end

function setContainer(name, line, args)
	if (Trim(args[1]) ~= "") then
		studyContainer = Trim(args[1])
		Note("Studycontainer set to " .. studyContainer)
	else
		studyContainer = ""
		Note("Studycontainer removed.")
	end
end



function studyArg(name, line, args)
  args = utils.split(args[1], " ")
  if args[1] ~= nil and args[1] ~= "" and #args == 1 then -- entered one argument, start studying that item
		studyitem = Trim(args[1])
  elseif studyitem ~= "" then
    -- do nothing here so we will fall back to study()
  elseif studyList[currentPos] then -- no argument, study list has valid item, study it
    studyitem = studyList[currentPos]
  else -- no argument, no valid item in list
    Send("study "..table.concat(args, " ")) -- pass through whatever we typed here
    return
  end
  study()
end


function study(name, line, args)
  if studyitem ~= "" and studyitem ~= nil then
    Send("study ".. studyitem)
  end
end

function finishedItem()
	if (studyContainer ~= "") then      -- if you're using a container
		Send("put " .. studyList[currentPos] .. " " .. studyContainer)   -- return item to container
	end
	internalRemove(currentPos)
	currentPos = currentPos - 1 -- decrement list pointer to properly get/take from container	
	studyNext()
end

function internalRemove(item)
   t = #studyList
   for i, v in ipairs(studyList) do
      if (v == item or (i == tonumber(item))) then
         Note("Removed '" .. v .. "' from study list.")
         table.remove(studyList, i)
         if (currentPos > i) then  -- if our item is higher in the list than what we remove
         	currentPos = currentPos - 1  -- decrement the pointer to follow the current item
         end
         break
      else
         if (t == i) then
            Note("Item '" .. item .. "' not found in study list.")
         end -- if
      end -- if
   end -- for
end -- function

function studyNext(name, line, args)
	if (currentPos > 0) then           -- if you're working on an previous item
		if (studyContainer ~= "") then      -- if you're using a container
			Send("put " .. studyList[currentPos] .. " " .. studyContainer)   -- return item to container
		end
	end
	currentPos = currentPos + 1
	if (currentPos > #studyList) then  -- reached end of list
		if (studyMode == "single") then     -- only studying each item once
			Note("Studying complete.")      -- finished
			toggleOff()
		else									-- start loop over again
			Note("Looping back to beginning.")
			StartStudying()
		end
	else                                    -- middle of list
    if (studyContainer ~= "") then          -- if you're using a container
      Send("get " .. studyList[currentPos] .. " " .. studyContainer)  -- get next item from container
    end
    studyitem = studyList[currentPos]
    study()  -- finally, study item
	end
end

function StudyEnded(name, line, args)
	if (studyMode == "multiple") then -- if studying multiple items
		studyNum = studyNum + 1       -- increment index
		-- Note("studyNum:" .. studyNum)
		if (studyNum > 9) then        -- if we're done with that item
			-- Note("Sliding to next item")
			studyNum = 0              -- reset counter
			studyNext()               -- move to next item
		else                          -- not done with item
			study()                   -- study item
		end
	else                              -- not studying multiple items
		study()                       -- study item
	end
end

function toggleOn(name, line, args)
	studyStatus = true
	EnableTriggerGroup("Studying", true)
	Note("Studying activated.")
end
function toggleOff(name, line, args)
	studyStatus = false
	EnableTriggerGroup("Studying", false)
	Note("Studying deactivated.")
end

function afkOn(name, line, args)
	afk = true
end

function afkOff(name, line, args)
	afk = false
end

function AddStudyItem(name, line, wildcards)
	local addLines = utils.split(wildcards[1], ",")
	if addLines then
		for i=1,#addLines, 1 do
			studyList[#studyList + 1] = addLines[i]
			Note("Added '" .. studyList[#studyList] .. "' to study list.")
		end
	else
		studyList[#studyList + 1] = wildcards[1]
		Note("Added '" .. studyList[#studyList] .. "' to study list.")
	end
end -- function

function StartBottingStudy(name, line, wildcards)
	if (afk==true) then
		Send("afk")
	end
	Send("bot start")
	study()
end

function RemoveStudyItem(name, line, wildcards)
   t = #studyList
   for i, v in ipairs(studyList) do
      if (v == wildcards[1] or (i == tonumber(wildcards[1]))) then
         Note("Removed '" .. v .. "' from study list.")
         table.remove(studyList, i)
         if (currentPos > i) then  -- if our item is higher in the list than what we remove
         	currentPos = currentPos - 1  -- decrement the pointer to follow the current item
         end
         break
      else
         if (t == i) then
            Note("Item '" .. wildcards[1] .. "' not found in study list.")
         end -- if
      end -- if
   end -- for
end -- function

function ClearList(name, line, wildcards)
	if (currentPos > 0) then           -- if you're working on an previous item
		if (studyContainer ~= "") then      -- if you're using a container
			Send("put " .. studyList[currentPos] .. " " .. studyContainer)   -- return item to container
		end
	end
	studyList = {}
	Note("Study list cleared.")
	currentPos = 0
	toggleOff()
end -- function

  ]]> 
  </script>
 <!--   Plugin help    --> 
 <aliases>
  <alias script="OnHelp" match="LotJStudying:help" enabled="y" /> 
  </aliases>
 <script>
 <![CDATA[ function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

  ]]> 
  </script>
  </muclient>